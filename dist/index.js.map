{"version":3,"sources":["../src/index.ts"],"names":["Y9A","j2w","options","_a","_b","ct","SG","jd","j","jf","y","m","d","h","n","s","b","c","f","e","thingyanTime","my","SY","SE3","ja","da","atarTime","jk","dk","thingyan","YearTo","YearFrom","tgTime","atat","AtatDayTime","akya","AkyaDayTime","akyo","AkyoDay","akyat","AkyatDay","AkyatDay2","akyat2","newyear","NewYearDay"],"mappings":"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","sourcesContent":["/*\n Acknowledgement\n The algorithm and calculations of this package are totally base on \"Modern Myanmar Calendrical Calculations\" by Yan Naing Aye.\n \n I just converted it into a package for use in Javascript runtimes.\n \n Information of the original creator Yan Naing Aye\n WebSite: https://yan9a.github.io/mcal/\n MIT License: (https://opensource.org/licenses/MIT)\n Copyright: (c) 2018 Yan Naing Aye\n Doc: http://cool-emerald.blogspot.com/2013/06/algorithm-program-and-calculation-of.html\n */\n\n/**\n * ## The beginning of the Julian date of the Burmese calendar 0 ME.\n *\n * **This constant was calculated and estimated by Yan Naing Aye.**\n *\n * **I mention it as Y9A in my package in honor of him.**\n */\nconst Y9A: number = 1954168.050623;\n/**\n * ## Type Defination for Julian date to Western date function input\n *\n *  ### jd - julian date\n *  ### ct - calendar type [Optional argument: 0=British (default), 1=Gregorian, 2=Julian]\n *  ### SG - Beginning of Gregorian calendar in JDN [Optional argument: (default=2361222)])Gregorian start in British calendar (1752/Sep/14)\n */\ninterface J2W {\n  jd: any;\n  calendarType?: number;\n  sg?: number;\n}\n/**\n *  ## Type Defination for Julian date to Western date function returns\n *\n *  ### Gregorian calendar's date and time\n */\ninterface J2WReturns {\n  year: number;\n  month: number;\n  day: number;\n  hour: number;\n  minute: number;\n  second: number;\n}\n/**\n * ## Julian date to Western date\n *\n * This function converts a Julian date to a Western date.\n *\n * @param {J2W} options - An object containing the Julian date, calendar type, and the\n *                        beginning of the Gregorian calendar in JDN.\n * @returns {J2WReturns} - An object containing the year, month, day, hour, minute, and second\n *                          of the Western date.\n */\nfunction j2w(options: J2W): J2WReturns {\n  // Default values for calendar type and beginning of the Gregorian calendar in JDN\n  const ct = options.calendarType ?? 0;\n  const SG = options.sg ?? 2361222;\n  const jd = options.jd;\n  var j, jf, y, m, d, h, n, s;\n\n  // Calculate the Western date based on the calendar type\n  if (ct == 2 || (ct == 0 && jd < SG)) {\n    var b, c, f, e;\n\n    // Calculate the Julian date\n    j = Math.floor(jd + 0.5);\n    jf = jd + 0.5 - j;\n    b = j + 1524;\n\n    // Calculate the year, month, and day\n    c = Math.floor((b - 122.1) / 365.25);\n    f = Math.floor(365.25 * c);\n    e = Math.floor((b - f) / 30.6001);\n    m = e > 13 ? e - 13 : e - 1;\n    d = b - f - Math.floor(30.6001 * e);\n\n    // Calculate the year\n    y = m < 3 ? c - 4715 : c - 4716;\n  } else {\n    j = Math.floor(jd + 0.5);\n    jf = jd + 0.5 - j;\n    j -= 1721119;\n    y = Math.floor((4 * j - 1) / 146097);\n    j = 4 * j - 1 - 146097 * y;\n    d = Math.floor(j / 4);\n    j = Math.floor((4 * d + 3) / 1461);\n    d = 4 * d + 3 - 1461 * j;\n    d = Math.floor((d + 4) / 4);\n    m = Math.floor((5 * d - 3) / 153);\n    d = 5 * d - 3 - 153 * m;\n    d = Math.floor((d + 5) / 5);\n    y = 100 * y + j;\n    if (m < 10) {\n      m += 3;\n    } else {\n      m -= 9;\n      y = y + 1;\n    }\n  }\n\n  // Calculate the hour, minute, and second\n  jf *= 24;\n  h = Math.floor(jf);\n  jf = (jf - h) * 60;\n  n = Math.floor(jf);\n  s = (jf - n) * 60;\n\n  // Return the Western date\n  return { year: y, month: m, day: d, hour: h, minute: n, second: s };\n}\n/**\n * ## Calculates the Atat Time and Akya Time of the Thingyan festival based on the given Burmese year.\n *\n * ### Input\n *    - **my - The Burmese year for which the Atat Time and Akya Time are calculated.**\n *\n * ### Returns\n *   - **An object containing the Julian Date (jd) and Julian Day Number (jdn) for the Atat Time (ja, da) and Akya Time (jk, dk) respectively.**\n *\n */\nfunction thingyanTime(my: number): {\n  ja: number;\n  jk: number;\n  da: number;\n  dk: number;\n} {\n  // solar year (365.2587565)\n  const SY: number = 1577917828 / 4320000;\n  // Burmese year of changing Atar Time.\n  const SE3: number = 1312;\n  // Julian Date(jd) of Atat Time for given Burmese Year\n  const ja: number = SY * my + Y9A;\n  // Julian Day Number(jdn) of Atat Time for given Burmese Year\n  const da: number = Math.round(ja);\n  // Length of Thingyan festival in days.\n  const atarTime: number = my >= SE3 ? 2.169918982 : 2.1675;\n  // Julian Date(jd) of Akya Time for given Burmese Year.\n  const jk: number = ja - atarTime;\n  // Julian Day Number(jdn) of Akya Time for given Burmese Year\n  const dk: number = Math.round(jk);\n  return { ja, jk, da, dk };\n}\n/**\n * Interface representing the properties of ThinGyan object.\n * Contains YearTo, YearFrom, AkyoDay, AkyaDayTime, AkyatDay, AkyatDay2, AtatDayTime, and NewYearDay.\n */\nexport interface ThinGyan {\n  YearTo: number;\n  YearFrom: number;\n  AkyoDay: string;\n  AkyaDayTime: string;\n  AkyatDay: string;\n  AkyatDay2: string;\n  AtatDayTime: string;\n  NewYearDay: string;\n}\n/**\n * ## Calculates the dates and times for the Mahar Thingyan festival based on the given Myanmar year.\n * \n * @param my - The Myanmar year for which the festival dates and times are calculated.\n * @returns - An object containing the festival dates and times.\n * \n * ```js\n * const thingyan = thingyan(1386);\n * console.log(thingyan.AtatDayTime)\n * ```\n */\nexport function thingyan(my: number): ThinGyan {\n  // Calculate the Myanmar year from which the festival dates are calculated.\n  const YearTo: number = my;\n  // Calculate the Myanmar year to which the festival dates are calculated.\n  const YearFrom: number = my - 1;\n\n  // Calculate the Julian Date and Julian Day Number for the festival dates.\n  const tgTime = thingyanTime(YearTo);\n\n  // Calculate the Atat Time for the given Myanmar year.\n  const atat = j2w({ jd: tgTime.ja });\n  // Format the Atat Time as a string.\n  const AtatDayTime: string = new Date(\n    atat.year,\n    atat.month - 1,\n    atat.day,\n    atat.hour,\n    atat.minute,\n    atat.second\n  ).toLocaleString(\"en-US\", {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"2-digit\",\n    weekday: \"short\",\n    hour12: true,\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n  });\n\n  // Calculate the Akya Time for the given Myanmar year.\n  const akya = j2w({ jd: tgTime.jk });\n  // Format the Akya Time as a string.\n  const AkyaDayTime: string = new Date(\n    akya.year,\n    akya.month - 1,\n    akya.day,\n    akya.hour,\n    akya.minute,\n    akya.second\n  ).toLocaleString(\"en-US\", {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"2-digit\",\n    weekday: \"short\",\n    hour12: true,\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n  });\n\n  // Calculate the day of the Akyo Time for the given Myanmar year.\n  const akyo = j2w({ jd: tgTime.dk - 1 });\n  // Format the Akyo Time day as a string.\n  const AkyoDay: string = new Date(\n    akyo.year,\n    akyo.month - 1,\n    akyo.day\n  ).toLocaleString(\"en-US\", {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"2-digit\",\n    weekday: \"short\",\n  });\n\n  // Calculate the day of the Akyat Time for the given Myanmar year.\n  const akyat = j2w({ jd: tgTime.dk + 1 });\n  // Format the Akyat Time day as a string.\n  const AkyatDay: string = new Date(\n    akyat.year,\n    akyat.month - 1,\n    akyat.day\n  ).toLocaleString(\"en-US\", {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"2-digit\",\n    weekday: \"short\",\n  });\n\n  // Check if there is a second Akyat Time and calculate its day if there is.\n  let AkyatDay2: string;\n  if (tgTime.da - tgTime.dk > 2) {\n    const akyat2 = j2w({ jd: tgTime.da - 1 });\n    AkyatDay2 = new Date(\n      akyat2.year,\n      akyat2.month - 1,\n      akyat2.day\n    ).toLocaleString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"2-digit\",\n      weekday: \"short\",\n    });\n  } else {\n    AkyatDay2 = \"\";\n  }\n\n  // Calculate the day of the New Year Day following the festival.\n  const newyear = j2w({ jd: tgTime.da + 1 });\n  // Format the New Year Day as a string.\n  const NewYearDay: string = new Date(\n    newyear.year,\n    newyear.month - 1,\n    newyear.day\n  ).toLocaleString(\"en-US\", {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"2-digit\",\n    weekday: \"short\",\n  });\n\n  // Return the festival dates and times.\n  return {\n    YearFrom,\n    YearTo,\n    AkyoDay,\n    AkyaDayTime,\n    AkyatDay,\n    AkyatDay2,\n    AtatDayTime,\n    NewYearDay,\n  };\n}\n"]}